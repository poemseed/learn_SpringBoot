1. Datasource
	- 순수 jdbc로 데이터베이스에 접근을 하면, 데이터베이스에 접근할때마다 connection을 맺고 끊는 작업을 한다. 이 connection을 맺고 끊는 작업을
	줄이기 위해 미리 connection을 생성해두고, 데이터베이스에 접근하고자 하는 사용자에게 미리 생성된 connection을 제공하고 돌려받는다.
	이 connection들을 모아두는 장소를 connection pool이라 하며, Datasource는 java에서 connection pool을 지원하기 위한 인터페이스이다.

2. 개방-폐쇄 원칙(OCP, Open-Cloesed Principle)
	- 확장에는 열려있고 수정, 변경에는 닫혀있다.
	- 스프링의 DI(Dependencies Injection)을 사용하면 기존 코드를 전혀 손대지 않고 설정만으로 구현 클래스를 변경할 수 있다.

3. JPA
	- JPA는 기존의 반복 코드는 물론이고 기본적인 SQL도 JPA가 직접 만들어서 실행해준다.
	- JPA를 사용하면 SQL과 데이터 중심의 설계에서 객체 중심의 설계로 패러다임을 전환할 수 있다.
	- JPA를 사용하면 개발 생산성을 크게 높일 수 있다.
	- JPA도 Spring만큼이나 큰 기술
	- Java Persistence API
	- JPA는 자바 진영에서 ORM(Object-Relational Mapping)기술 표준으로 사용되는 인터페이스의 모음이다. 그 말은 즉, 실제적으로 구현된 것이 아니
	라 구현된 클래스와 매핑을 해주기 위해 사용되는 프레임워크이다. JPA를 구현한 대표적인 오픈소스로는 Hibernate가 있다.(JPA는 표준 인터페이스,
	구현체가 Hibernate이다)

4. ORM(Object-Relational Mapping)
	- 우리가 일반적으로 알고 있는 애플리케이션 Class와 RDB(Relational DataBase)의 테이블을 매핑(연결)한다는 뜻이며, 기술적으로는 어플리케이션의 
	객체를 RDB테이블에 자동으로 영속화 해주는 것이라고 보면 된다.
	- 객체와 관계형 데이터베이스의 데이터를 자동으로 매핑(연결)해주는 것을 말한다.
		-> 객체지향 프로그래밍은 클래스를 사용하고, 관계형 데이터베이스는 테이블을 사용한다. 
		-> 객체 모델과 관계형 모델간의 불일치가 존재한다. 
		-> ORM을 통해 객체 간의 관계를 바탕으로 SQL을 자동으로 생성하여 불일치를 해결한다.
		-> 객체를 통해 간접적으로 데이터베이스 데이터를 다룬다.

5. JPQL(Java Persistence Query Language)
	- 테이블이 아닌 엔티티 객체를 대상으로 검색하는 객체 지향 쿼리
	- SQL을 추상화해서 특정 데이터베이스 SQL에 의존하지 않음
	- JPA는 JPQL을 분석한 후 적절한 SQL을 만들어 데이터베이스를 조회
	- 대소문자를 구분
		-> JPQL 키워드는 구분하지 않음
		-> 엔티티와 속성은 대소문자를 구분
	- 별칭은 필수
		-> JPQL은 별칭은 필수
		-> AS는 생략 가능

6. SOLID : 클린코드를 위한 좋은 객체지향 설계의 5가지 원칙
	- SRP	: 단일 책임 원칙(Single Responsibility principle)
	- OCP	: 개방-폐쇄 원칙(Open/Closed principle)
	- LSP	: 리스코프 치환 원칙(Liskov substitution principle)
	- ISP	: 인터페이스 분리 원칙(Interface segregation principle)
	- DIP	: 의존관계 역전 원칙(Dependency inversion principle)

 6-1. SRP : 단일 책임 원칙(Single Responsibility principle)
	- 한 클래스는 하나의 책임만 가져야 한다.
	- 하나의 책임이라는 것은 모호하다.
	- 클 수도 있고, 작을 수 있다.
	- 문맥과 상황에 따라 다르다.
	- 중요한 기준은 변경이다. 변경이 있을 때 파급 효과가 적으면 단일 책임 원칙을 잘 따른 것

 6-2. OCP : 개방-폐쇄 원칙(Open/Closed principle)

 6-3. LSP : 리스코프 치환 원칙(Liskov substitution principle)
	- 프로그램의 객체는 프로그램의 정확성을 깨트리지 않으면서 하위 타입의 인스턴스로 바꿀 수 있어야 한다.
	- 다형성에서 하위 클래스는 인터페이스 규약을 다 지켜야 한다는 것, 다형성을 지원하기 위한 원칙, 인터페이스를 구현한 구현체는 믿고 사용하려
	면 이 원칙이 필요하다.
	- 단순히 컴파일에 성공하는 것을 넘어서는 이야기이다.

 6-4. ISP : 인터페이스 분리 원칙(Interface segregation principle)
	- 특정 클라이언트를 위한 인터페이스 여러개가 범용 인터페이스 하나보다 낫다.
	- 인터페이스가 명확해지고, 대체 가능성이 높아진다.

 6-5. DIP : 의존관계 역전 원칙(Dependency inversion principle)
	- 프로그래머는 "추상화에 의존해야지, 구체화에 의존하면 안된다." 
	의존성 주입은 이 원칙을 따르는 방법 중 하나다.
	- 쉽게 말해서 구현 클래스에 의존하지 말고 인터페이스에 의존하라는 뜻이다.
	- 인터페이스에 의존해야 유연하게 구현체를 변경할 수 있다. 구현체에 의존하면 변경이 아주 어려워진다. 

7. HTTP 요청 파라미터



