1. 영속성 컨텍스트의 이점
	- 1차 캐시
	- 동일성(identity)보장
	- 트랜잭션을 지원하는 쓰기 지연(transactional write-behind)
	- 변경 감지
	- 지연 로딩

 1-1. 트랜젝션을 지원하는 쓰기 지연(transactional write-behind)
	
	EntityManagerFactory emf = Persistence.createEntityManagerFactory("hello");
		EntityManager em = emf.createEntityManager();
	
	transaction.begin();		// 트랜잭션 시작

	em.persist(memberA);
	em.persist(memberB);
	// 여기까지는 INSERT SQL을 데이터베이스에 보내지 않는다.

	// 커밋하는 순간 데이터베이스에 INSERT SQL을 보낸다.
	transaction.commit();	// 트랜잭션 커밋

 1-2. 변경 감지
	transaction.begin();		// 트랜잭션 시작

	// 엔티티 조회
	Member memberA = em.find(Member.class, "memberA");

	// 영속 엔티티 데이터 수정
	memberA.setUsername("자바학생");
	memberA.setAge(20);

	//em.update(memberA);	-> 알아서 업데이트구문 처리해준다.

	transaction.commit();	// 트랜잭션 커밋

 1-3. 플러시
	- 영속성 컨텍스트의 변경내용을 데이터베이스에 반영

 1-4. 플러시 발생
	- 변경 감지
	- 수정된 엔티티 쓰기 지연  SQL 저장소에 등록
	- 등록, 수정, 삭제 쿼리등을 데이터베이스에 전송

 1-5. 영속성 컨텍스트를 플러시하는 방법
	- em.flush() - 직접 호출
	- 트랜잭션 커밋 - 플러시 자동 호출
	- JPQL쿼리 실행 -  플러시 자동 호출

 1-6. 플러시는?
	- 영속성 컨텍스트를 비워지 않음
	- 영속성 컨텍스트의 변경내용을 데이터베이스에 동기화
	- 트랜잭션이라는 작업 단위가 중요 -> 커밋 직전에만 동기화하면 된다

** JPA는 동시성, 데이터를 맞추는 등의 행위를 모두 트랜잭션에 위임을 한다. 

2. 엔티티 매핑 소개
	- 객체와 테이블 매핑	: @Entity, @Table
	- 필드와 컬럼 매핑		: @Column
	- 기본 키 매핑		: @Id
	- 연관관계 매핑		: @ManyToOne

 2-1. @Entity
	- @Entity 가 붙은 클래스는 JPA가 관리할 엔티티라고 한다.
	- JPA를 사용해서 테이블과 매핑할 클래스는 @Entity필수
	- 주의사항	: 기본 생성자 필수
			  interface 사용불가
			  저장할 필드에 final 사용불가

 2-2. @Table
	- @Table 엔티티와 매핑할 테이블 지정
	- name	: 매핑할 테이블 이름

 2-3. @Column
	- 제약조건 추가	: 회원이름 필수, 10자까지
		@Column(nullable=false, length=10)

	- 필드와 컬럼 매핑
		-> @Column		: 컬럼 매핑
		-> @Temporal	: 날짜 타입 매핑
		-> @Lob		: BLOB, CLOB 매핑
		-> @Transient	: 특정 필드를 컬럼에 매핑하기 않음(매핑 무시)
					 필드 매핑 되지 않음
					 데이터베이스에 저장X, 조회X

 2-4. @Id
	- @Id			: 직접 할당
	- @GeneratedValue	: 자동 생성(전략)
		-> IDENTITY		: 데이터베이스에 위임, MySql, PostgreSQL, DB2
					  (AUTO_INCREMENT)
		-> SEQUENCE	: 데이터베이스 시퀀스 오브젝트 사용, ORACLE, TIBERO
					  데이터베이스 시퀀스는 유일한 값을 순서대로 생성하는 특별한 데이터베이스 오브젝트
		-> TABLE		: 키 생성용 테이블 사용, 모든 DB에서 사용 가능
		-> AUTO		: 방언에 따라 자동 지정, 기본값

	-@SequenceGenerator
		-> name		: 식별자 생성기 이름(필수)
		-> sequenceName	: 데이터베이스에 등록되어 있는 시퀀스 이름(기본값 : hibernate_sequence)
		-> initialValue	: 시퀀스 생성할때 처음 시작하는 수를 지정, DDL생성시 사용(기본값 : 1)
		-> allocationSize	: 시퀀스 한 번 호출에 증가하는 수(기본값 : 50)

3. 데이터베이스 스키마 자동 생성
	- DDL을 애플리케이션 실행 시점에 테이블 자동생성
	- 테이블 중심 -> 객체 중심
	- 데이터베이스 방언을 활용해서 데이터베이스에 맞는 적절한 DDL을 생성
	- 이렇게 생성된 DDL은 개발 장비에서만 사용(운영에서 사용해서는 안된다)
	- 생성된 DDL은 운영서버에서는 바로 사용하지 않으나, 적절히 다듬은 후 사용
	- hibernate.hbm2ddl.auto 라는 옵션
		-> create		: 기존 테이블 삭제 후 다시 생성(drop+create)
		-> create-drop	: create와 같으나 종료시점에 테이블 drop
		-> update		: 변경분만 반영
		-> validation		: 엔티티와 테이블이 정상 매핑되었는지만 확인
		-> none		: 사용하지 않음

4. 연관관계 매핑


	



