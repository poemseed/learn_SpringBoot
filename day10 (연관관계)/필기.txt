1. 연관관계 매핑
 1-1. 데이터 중심 설계의 문제점

 1-2. 연관관계 매핑 기초
	- 객체와 테이블 연관관계의 차이를 이해
	- 객체의 참조와 테이블의 외래를 매핑
	- 단방향, 양방향

	- 객체를 테이블에 맞추어 데이터 중심으로 모델링하면, 협력관계를 만들 수 없다.
	- 테이블은 외래키로 조인을 사용해서 연관된 테이블을 찾는다.
	- 객체는 참조를 사용해서 연관된 객체를 찾는다.
	- 테이블과 객체 사이에 간격이 존재한다.

2. 객체와 테이블이 관계를 맺는 차이
 2-1. 테이블 연관관계 -> 1개
	- 회원 <-> 팀의 연관관계 1개(양방향)
	- FK만 잘 걸려있으면 양쪽으로 이동할 수 있다.
	- Member 테이블 입장에서 Team 테이블 조인 가능
	  (Member가 속한 Team을 조회할 수 있다.)
	- Team 테이블 입장에서 Member 테이블 조인 가능
	  (Team을 기준으로 조인시 우리팀에 어떤 Member가 속해 있는지 알 수 있다.)

 2-2. 객체 연관관계 -> 2개
	- 회원 -> 팀 연관관계 1개 (단방향)
	- 팀 -> 회원 연관관계 1개(단방향)
		=> 단방향 연관관계가 2개 있는 것이다.
		=> 억지로 양방향이라고 말하는 것

		class A{
			B b;
		}

		class B{
			A a;
		}

		A -> B	: a.getB();
		B -> A	: b.getA();

 2-3. 테이블의 양방향 연관관계
	- 테이블은 외래키 하나로 두 테이블의 연관관계를 관리

		select *
		from Member m
		left outer join Team t on m.team_id = t.team_id
		
		select *
		from Team t
		left outer join Member m on t.team_id = m.team_id

 2-4. 둘 중 하나로 외래키를 관리해야 한다. (딜레마)
	- Member에서 Team으로 가는 team 참조 값과, Team에서 Member로 가는 members 참조 값이 있다.
	- Team에 있는 members를 수정했을 때 Member에 있는 TEAM_ID가 수정되야 하는지, 
	Member에 있는 Team 값이 수정됐을때 MEMBER 테이블의 TEAM_ID가 수정이 되야 하는지
	- DB입장에서는 MEMBER에 있는 TEAM_ID만 update되면 된다.

 2-5. 연관관계의 주인(Owner)
	- 객체의 두 관계 중 하나를 연관관계의 주인으로 지정
	- 연관관계의 주인만이 외래키를 관리(등록, 수정)
	- 주인이 아닌 쪽은 읽기만 가능
	- mappedBy	: 내가 누군가에 의해서 mapping되었다라는 뜻
	- 주인은 mappedBy 속성을 사용하지 않는다.
	- 외래키가 있는 곳을 주인으로 정한다.
	- Member.team이 연관관계 주인

 2-6. 양방향 연관관계 주의
	- 순수 객체 상태를 고려해서 항상 양쪽에 값을 설정하자
	- 연관관계 편의 메소드를 생성하자
	- 양방향 매핑시에 무한 루프를 조심하자
 
