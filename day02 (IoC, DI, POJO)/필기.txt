1. Controller와 Service
	- MVC : Model, View, Controller
	- Spring Framework MVC : Model( DAO, DTO, Service ), View, Controller

 1-1. Service
	- 서비스레이어(Service Layer)단에서 세분화된 비지니스 로직을 처리하는 객체이다.
	- 서비스는 비지니스 로직이 들어가는 부분이다.
	- Controller가 Request를 받으면 적절한 Service에 전달하고 전달 받은 Service는 비지니스 로직을 처리한다.
	- 각 데이터는 DTO로 데이터를 전달 받고, DAO로 데이터베이스에 접근한다.

2. IoC(Inversion of Control) : 제어역전
	- 개발자가 프레임워크의 기능을 호출하는 형태가 아니라 프레임워크가 개발자의 코드를 호출하기 때문에, 개발자는 전체를 직접 구현하지 않고
	자신의 코드를 부분적으로 "끼워넣기"하는 형태로 구현할 수 있다. 이는 개발자로 하여금 구현하고자 하는 특정 분야의 기능에 집중할 수 있도록
	한다. 
	- 프레임워크가 객체의 생성, 소멸과 같은 라이프 사이클을 관리하며 스프링으로부터 필요한 객체를 얻어올 수 있다. 
	- 객체의 의존성을 역전시켜 객체 간의 결합도를 줄이고 유연한 코드를 작성할 수 있게 하여 가독성 및 코드 중복, 유지보수를 편하게 할 수 있게
	한다. 

3. 스프링 컨테이너란?
	- 스프링 컨테이너는 자바 객체의 생명 주기를 관리하며, 생성된 자바 객체들에게 추가적인 기능을 제공하는 역할을 합니다. 여기서 말하는 자바 객
	체를 스프링에서는 빈(Bean)이라고 부릅니다. 
	- 개발자는 객체를 생성하고 소멸할 수 있는데, 스프링 컨테이너가 이 역할을 대신해 줍니다. 즉, 제어의 흐름을 외부에서 관리하는 것이다. 또한, 객
	체들 간의 의존관계를 스프링 컨테이너가 런타임 과정에서 알아서 만들어 줍니다. 
	- 스프링은 실행시 객체들을 담고 있는 Container가 있다. 

4. @Autowired
	- 필요한 의존 객체의 "타입"에 해당하는 빈을 찾아 주입한다. 
	- 의존성 주입을 할 대상을 찾지 못하면 애플리케이션 구동에 실패한다. 

5. POJO란?
	- Plain Old Java Object, 단순한 자바 오브젝트
	- POJO란, 객체 지향적인 원리에 충실하면서 환경과 기술에 종속되지 않고 필요에 따라 재활용 될 수 있는 방식으로 설계된 오브젝트를 말한다.
	그러한 POJO에 애플리케이션의 핵심 로직과 기능을 담아 설계하고 개발하는 방법을 POJO프로그래밍이라고 할 수 있다.

** 참고 : 스프링은 스프링 컨테이너에 스프링 빈을 등록할 때, 기본으로 싱글톤으로 등록한다. 따라서 같은 스프링 빈이면 모두 같은 인스턴스다.

6. DI(Dependency Injection) : 의존성 주입
	- 객체 간의 의존성이 존재할 경우에 개발자가 직접 객체를 생성하거나 제어하는 것이 아니라 제어반전에 의하여 특정 객체에 필요한 다른 객체를
	프레임워크가 자동으로 연결시켜주는 것을 말한다.
	- 개발자는 자신에게 필요한 객체를 직접 할당하지 않고, 인터페이스를 통해 선언한 객체에 스프링 프레임워크에 의해 주입받아 사용할 수 있기 때
	문에 비지니스 로직 개발에만 집중할 수 있다. 
	- 개발자는 객체를 선언만 할 뿐, 할당은 프레임워크에 의해서 자동으로 이루어진다.

7. 스프링 빈을 등록하는 2가지 방법
	- 컴포넌트 스캔 : @Component
	- 자바 코드로 직접 스프링 빈 등록하는 방법 

8. DI의 3가지 방법
	- Field Injection(필드 주입)
	- Setter Injection(수정자 주입)
	- Constructor Injection(생성자 주입)